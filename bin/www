#!/usr/bin/env node

import http from 'http';
import debugLib from 'debug';
import { WebSocketServer } from 'ws';
import app from '../app.js';

const debug = debugLib('test:server');

const normalizePort = val => {
    const port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
};

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

const wss = new WebSocketServer({ server });

app.set('wss', wss);

wss.on('connection', ws => {
    console.log('WS Client connected');
    ws.on('close', () => console.log('WS Client disconnected'));
});

server.listen(port);

server.on('error', error => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});

server.on('listening', _ => {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
});
